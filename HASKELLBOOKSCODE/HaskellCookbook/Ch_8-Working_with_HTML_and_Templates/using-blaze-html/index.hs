{-# LANGUAGE OverloadedStrings #-}

import Prelude
import qualified Prelude as P
import Data.Monoid (mempty)

import Text.Blaze.Html5 hiding (main)
import qualified Text.Blaze.Html5 as H
import Text.Blaze.Html5.Attributes
import qualified Text.Blaze.Html5.Attributes as A
import Text.Blaze.Html.Renderer.Pretty (renderHtml)

index :: Html
index = do
    docTypeHtml $ do
        H.head $ do
            H.title "Haskell Language"
            meta ! charset "utf-8"
            meta ! content "IE edge" ! httpEquiv "X-UA-Compatible"
            meta ! content "width=device-width, initial-scale=1" ! name "viewport"
            meta ! content "haskell,functional,pure,programming,lazy" ! name "keywords"
            meta ! content "The Haskell purely functional programming language home page." ! name "description"
            link ! href "http://www.haskell.org/static/img/favicon.ico?etag=-4XQV6tt" ! rel "shortcut icon"
            link ! href "https://fonts.googleapis.com/css?family=Source+Sans+Pro|Raleway:700,900|Ubuntu+Mono:400" ! type_ "text/css" ! rel "stylesheet"
            link ! href "http://www.haskell.org/static/css/hl.min.css?etag=5CW6sfgF" ! type_ "text/css" ! rel "stylesheet"
        body ! class_ "page-home" $ do
            H.div ! class_ "wrap" $ do
                nav ! class_ "navbar navbar-default" $ H.div ! class_ "container" $ do
                    H.div ! class_ "navbar-header" $ button ! dataAttribute "toggle" "collapse" ! dataAttribute "target" "#haskell-menu" ! class_ "navbar-toggle collapsed" $ do
                        H.span ! class_ "sr-only" $ mempty
                        H.span ! class_ "icon-bar" $ mempty
                        H.span ! class_ "icon-bar" $ mempty
                        H.span ! class_ "icon-bar" $ mempty
                    H.div ! A.id "haskell-menu" ! class_ "collapse navbar-collapse" $ ul ! class_ "nav navbar-nav navbar-right" $ do
                        li $ a ! href "/downloads" $ "Downloads"
                        li $ a ! href "/community" $ "Community"
                        li $ a ! href "/documentation" $ "Documentation"
                        li $ a ! href "/news" $ "News"
                H.div ! class_ "header" $ H.div ! class_ " container " $ H.div ! class_ " row " $ do
                    H.div ! class_ " span12 col-sm-12 hidden-xs" $ br
                    H.div ! class_ " span6 col-md-6" $ H.div ! class_ "branding" $ do
                        br ! class_ "hidden-xs"
                        img ! src "http://www.haskell.org/static/img/haskell-logo.svg?etag=ukf3Fg7-" ! class_ "img-responsive"
                        h4 ! class_ "summary" $ "An advanced, purely functional programming language"
                    H.div ! class_ " span6 col-md-6" $ H.div ! class_ "branding sample" $ do
                        br ! class_ "visible-xs visible-sm"
                        h4 ! class_ "tag" $ "Declarative, statically typed code."
                        H.div ! A.title "This example is contrived in order to demonstrate what Haskell looks like, including: (1) where syntax, (2) enumeration syntax, (3) pattern matching, (4) consing as an operator, (5) list comprehensions, (6) infix functions. Don't take it seriously as an efficient prime number generator." ! class_ "code-sample" $ pre $ do
                            H.span ! class_ "hs-definition" $ "primes"
                            H.span ! class_ "hs-keyglyph" $ "="
                            H.span ! class_ "hs-varid" $ "filterPrime"
                            H.span ! class_ "hs-keyglyph" $ "["
                            H.span ! class_ "hs-num" $ "2"
                            H.span ! class_ "hs-keyglyph" $ ".."
                            H.span ! class_ "hs-keyglyph" $ "]"
                            H.span ! class_ "hs-keyword" $ "where"
                            H.span ! class_ "hs-varid" $ "filterPrime"
                            H.span ! class_ "hs-layout" $ "("
                            H.span ! class_ "hs-varid" $ "p"
                            H.span ! class_ "hs-conop" $ ":"
                            H.span ! class_ "hs-varid" $ "xs"
                            H.span ! class_ "hs-layout" $ ")"
                            H.span ! class_ "hs-keyglyph" $ "="
                            H.span ! class_ "hs-varid" $ "p"
                            H.span ! class_ "hs-conop" $ ":"
                            H.span ! class_ "hs-varid" $ "filterPrime"
                            H.span ! class_ "hs-keyglyph" $ "["
                            H.span ! class_ "hs-varid" $ "x"
                            H.span ! class_ "hs-keyglyph" $ "|"
                            H.span ! class_ "hs-varid" $ "x"
                            H.span ! class_ "hs-keyglyph" $ "<-"
                            H.span ! class_ "hs-varid" $ "xs"
                            H.span ! class_ "hs-layout" $ ","
                            H.span ! class_ "hs-varid" $ "x"
                            H.span ! class_ "hs-varop" $ "`mod`"
                            H.span ! class_ "hs-varid" $ "p"
                            H.span ! class_ "hs-varop" $ "/="
                            H.span ! class_ "hs-num" $ "0"
                            H.span ! class_ "hs-keyglyph" $ "]"
                br
                br ! class_ "hidden-xs hidden-sm"
                br ! class_ "hidden-xs hidden-sm"
                H.div ! class_ "pattern-bg" $ H.div ! class_ " container " $ H.div ! class_ " row " $ H.div ! class_ " span12 col-sm-12" $ H.div ! onclick "tryhaskell.controller.inner.click()" ! class_ "try" $ H.div ! class_ " container " $ H.div ! class_ " row " $ do
                    H.div ! class_ " span6 col-sm-6" $ do
                        h2 "Try it!"
                        noscript $ H.div ! class_ " span6 " $ H.div ! class_ "alert alert-warning" $ "Try haskell requires Javascript to be enabled."
                        H.div ! hidden "" ! A.id "cookie-warning" ! class_ " span6 " $ H.div ! class_ "alert alert-warning" $ "Try haskell requires cookies to be enabled."
                        H.div ! A.id "console" $ mempty
                    H.div ! A.id "guide" ! class_ " span6 col-sm-6" $ mempty
                br
                H.div ! A.id "community-wrapper" $ H.div ! class_ "videos" $ H.div ! class_ " container " $ H.div ! class_ " row " $ H.div ! class_ " span12 col-sm-12" $ do
                    h2 "Videos"
                    br
                    H.div ! class_ " row " $ H.div ! class_ " span12 col-sm-12" $ H.div ! class_ " row row-flex" $ do
                        H.div ! class_ " span3 col-xs-6 col-sm-3 col-md-2" $ a ! href "https://vimeo.com/96744621" ! A.title "Functional Reactive Programming for Musical User Interfaces by Paul Hudak" ! class_ "thumbnail" $ do
                            img ! src "https://i.vimeocdn.com/video/476988542_150x84.jpg" ! class_ "img-responsive"
                            H.div ! class_ "caption" $ h5 "Functional Reactive Programming for Musical User Interfaces by Paul Hudak"
                        H.div ! class_ " span3 col-xs-6 col-sm-3 col-md-2" $ a ! href "http://vimeo.com/90189610" ! A.title "Conquering Hadoop with Haskell and Ozgun Ataman" ! class_ "thumbnail" $ do
                            img ! src "https://i.vimeocdn.com/video/469235326_150x84.jpg" ! class_ "img-responsive"
                            H.div ! class_ "caption" $ h5 "Conquering Hadoop with Haskell and Ozgun Ataman"
                        H.div ! class_ " span3 col-xs-6 col-sm-3 col-md-2" $ a ! href "http://vimeo.com/90184695" ! A.title "Using Lenses to Structure State with Nathan Bouscal" ! class_ "thumbnail" $ do
                            img ! src "https://i.vimeocdn.com/video/469227196_150x84.jpg" ! class_ "img-responsive"
                            H.div ! class_ "caption" $ h5 "Using Lenses to Structure State with Nathan Bouscal"
                        H.div ! class_ " span3 col-xs-6 col-sm-3 col-md-2" $ a ! href "http://vimeo.com/80895330" ! A.title "GHCJS: Bringing Haskell to the Browser, by Luite Stegeman" ! class_ "thumbnail" $ do
                            img ! src "https://i.vimeocdn.com/video/456929997_150x84.jpg" ! class_ "img-responsive"
                            H.div ! class_ "caption" $ h5 "GHCJS: Bringing Haskell to the Browser, by Luite Stegeman"
                        H.div ! class_ " span3 col-xs-6 col-sm-3 col-md-2" $ a ! href "http://vimeo.com/80863583" ! A.title "J\9500\9565rgen Cito presents todo-example, a lightweight webapp in Haskell" ! class_ "thumbnail" $ do
                            img ! src "https://i.vimeocdn.com/video/456929840_150x84.jpg" ! class_ "img-responsive"
                            H.div ! class_ "caption" $ h5 "JÃ¼rgen Cito presents todo-example, a lightweight webapp in Haskell"
                        H.div ! class_ " span3 col-xs-6 col-sm-3 col-md-2" $ a ! href "http://vimeo.com/77164337" ! A.title "Abstractions for the Functional Roboticist with Anthony Cowley" ! class_ "thumbnail" $ do
                            img ! src "https://i.vimeocdn.com/video/452269027_150x84.jpg" ! class_ "img-responsive"
                            H.div ! class_ "caption" $ h5 "Abstractions for the Functional Roboticist with Anthony Cowley"
                H.div ! class_ "features" $ H.div ! class_ " container " $ do
                    h2 "Features"
                    H.div ! class_ " row " $ do
                        H.div ! class_ " span6 col-md-6" $ do
                            h3 "Statically typed"
                            p "Every expression in Haskell has a type which is determined at compile time. All the types composed together by function application have to match up. If they don't, the program will be rejected by the compiler. Types become not only a form of guarantee, but a language for expressing the construction of programs."
                            p ! class_ "text-center" $ a ! dataAttribute "toggle" "collapse" ! href "#collapse-statically-typed" ! class_ "btn btn-xs btn-primary" $ "Click to expand"
                            H.div ! A.id "collapse-statically-typed" ! class_ "collapse" $ do
                                p "All Haskell values have a type:"
                                pre $ do
                                    H.span ! class_ "hs-definition" $ "char"
                                    H.span ! class_ "hs-keyglyph" $ "="
                                    H.span ! class_ "hs-chr" $ "'a'"
                                    H.span ! class_ "hs-keyglyph" $ "::"
                                    H.span ! class_ "hs-conid" $ "Char"
                                    H.span ! class_ "hs-definition" $ "int"
                                    H.span ! class_ "hs-keyglyph" $ "="
                                    H.span ! class_ "hs-num" $ "123"
                                    H.span ! class_ "hs-keyglyph" $ "::"
                                    H.span ! class_ "hs-conid" $ "Int"
                                    H.span ! class_ "hs-definition" $ "fun"
                                    H.span ! class_ "hs-keyglyph" $ "="
                                    H.span ! class_ "hs-varid" $ "isDigit"
                                    H.span ! class_ "hs-keyglyph" $ "::"
                                    H.span ! class_ "hs-conid" $ "Char"
                                    H.span ! class_ "hs-keyglyph" $ "->"
                                    H.span ! class_ "hs-conid" $ "Bool"
                                p "You have to pass the right type of values to functions, or the compiler will reject the program:"
                                H.div ! class_ "rejected-code" $ do
                                    H.span ! class_ "rejected-note" $ "Type error"
                                    pre $ do
                                        H.span ! class_ "hs-definition" $ "isDigit"
                                        H.span ! class_ "hs-num" $ "1"
                                p "You can decode bytes into text:"
                                pre $ do
                                    H.span ! class_ "hs-definition" $ "bytes"
                                    H.span ! class_ "hs-keyglyph" $ "="
                                    H.span ! class_ "hs-conid" $ "Crypto"
                                    H.span ! class_ "hs-varop" $ "."
                                    H.span ! class_ "hs-conid" $ "Hash"
                                    H.span ! class_ "hs-varop" $ "."
                                    H.span ! class_ "hs-conid" $ "SHA1"
                                    H.span ! class_ "hs-varop" $ "."
                                    H.span ! class_ "hs-varid" $ "hash"
                                    H.span ! class_ "hs-str" $ "\"hello\""
                                    H.span ! class_ "hs-keyglyph" $ "::"
                                    H.span ! class_ "hs-conid" $ "ByteString"
                                    H.span ! class_ "hs-definition" $ "text"
                                    H.span ! class_ "hs-keyglyph" $ "="
                                    H.span ! class_ "hs-varid" $ "decodeUtf8"
                                    H.span ! class_ "hs-varid" $ "bytes"
                                    H.span ! class_ "hs-keyglyph" $ "::"
                                    H.span ! class_ "hs-conid" $ "Text"
                                p "But you cannot decode Text, which is already a vector of Unicode points:"
                                H.div ! class_ "rejected-code" $ do
                                    H.span ! class_ "rejected-note" $ "Type error"
                                    pre $ do
                                        H.span ! class_ "hs-definition" $ "doubleDecode"
                                        H.span ! class_ "hs-keyglyph" $ "="
                                        H.span ! class_ "hs-varid" $ "decodeUtf8"
                                        H.span ! class_ "hs-layout" $ "("
                                        H.span ! class_ "hs-varid" $ "decodeUtf8"
                                        H.span ! class_ "hs-varid" $ "bytes"
                                        H.span ! class_ "hs-layout" $ ")"
                        H.div ! class_ " span6 col-md-6" $ do
                            h3 "Purely functional"
                            p "Every function in Haskell is a function in the mathematical sense (i.e., \"pure\"). Even side-effecting IO operations are but a description of what to do, produced by pure code. There are no statements or instructions, only expressions which cannot mutate variables (local or global) nor access state like time or random numbers."
                            p ! class_ "text-center" $ a ! dataAttribute "toggle" "collapse" ! href "#collapse-functional" ! class_ "btn btn-xs btn-primary" $ "Click to expand"
                            H.div ! A.id "collapse-functional" ! class_ "collapse" $ do
                                p "The following function takes an integer and returns an integer. By the type it cannot do any side-effects whatsoever, it cannot mutate any of its arguments."
                                pre $ do
                                    H.span ! class_ "hs-definition" $ "square"
                                    H.span ! class_ "hs-keyglyph" $ "::"
                                    H.span ! class_ "hs-conid" $ "Int"
                                    H.span ! class_ "hs-keyglyph" $ "->"
                                    H.span ! class_ "hs-conid" $ "Int"
                                    H.span ! class_ "hs-definition" $ "square"
                                    H.span ! class_ "hs-varid" $ "x"
                                    H.span ! class_ "hs-keyglyph" $ "="
                                    H.span ! class_ "hs-varid" $ "x"
                                    H.span ! class_ "hs-varop" $ "*"
                                    H.span ! class_ "hs-varid" $ "x"
                                p "The following string concatenation is okay:"
                                pre $ do
                                    H.span ! class_ "hs-str" $ "\"Hello: \""
                                    H.span ! class_ "hs-varop" $ "++"
                                    H.span ! class_ "hs-str" $ "\"World!\""
                                p "The following string concatenation is a type error:"
                                H.div ! class_ "rejected-code" $ do
                                    H.span ! class_ "rejected-note" $ "Type error"
                                    pre $ do
                                        H.span ! class_ "hs-str" $ "\"Name: \""
                                        H.span ! class_ "hs-varop" $ "++"
                                        H.span ! class_ "hs-varid" $ "getLine"
                                p $ do
                                    "Because"
                                    code "getLine"
                                    "has type"
                                    code "IO String"
                                    "and not"
                                    code "String"
                                    ", like"
                                    code "\"Name: \""
                                    "is. So by the type system you cannot mix and match purity with impurity."
                    H.div ! class_ " row " $ do
                        H.div ! class_ " span6 col-md-6" $ do
                            h3 "Type inference"
                            p "You don't have to explicitly write out every type in a Haskell program. Types will be inferred by unifying every type bidirectionally. However, you can write out types if you choose, or ask the compiler to write them for you for handy documentation."
                            p ! class_ "text-center" $ a ! dataAttribute "toggle" "collapse" ! href "#collapse-type-inference" ! class_ "btn btn-xs btn-primary" $ "Click to expand"
                            H.div ! A.id "collapse-type-inference" ! class_ "collapse" $ do
                                p "This example has a type signature for every binding:"
                                pre $ do
                                    H.span ! class_ "hs-definition" $ "main"
                                    H.span ! class_ "hs-keyglyph" $ "::"
                                    H.span ! class_ "hs-conid" $ "IO"
                                    H.span ! class_ "hs-conid" $ "()"
                                    H.span ! class_ "hs-definition" $ "main"
                                    H.span ! class_ "hs-keyglyph" $ "="
                                    H.span ! class_ "hs-keyword" $ "do"
                                    H.span ! class_ "hs-varid" $ "line"
                                    H.span ! class_ "hs-keyglyph" $ "::"
                                    H.span ! class_ "hs-conid" $ "String"
                                    H.span ! class_ "hs-keyglyph" $ "<-"
                                    H.span ! class_ "hs-varid" $ "getLine"
                                    H.span ! class_ "hs-varid" $ "print"
                                    H.span ! class_ "hs-layout" $ "("
                                    H.span ! class_ "hs-varid" $ "parseDigit"
                                    H.span ! class_ "hs-varid" $ "line"
                                    H.span ! class_ "hs-layout" $ ")"
                                    H.span ! class_ "hs-keyword" $ "where"
                                    H.span ! class_ "hs-varid" $ "parseDigit"
                                    H.span ! class_ "hs-keyglyph" $ "::"
                                    H.span ! class_ "hs-conid" $ "String"
                                    H.span ! class_ "hs-keyglyph" $ "->"
                                    H.span ! class_ "hs-conid" $ "Maybe"
                                    H.span ! class_ "hs-conid" $ "Int"
                                    H.span ! class_ "hs-varid" $ "parseDigit"
                                    H.span ! class_ "hs-layout" $ "("
                                    H.span ! class_ "hs-layout" $ "("
                                    H.span ! class_ "hs-varid" $ "c"
                                    H.span ! class_ "hs-keyglyph" $ "::"
                                    H.span ! class_ "hs-conid" $ "Char"
                                    H.span ! class_ "hs-layout" $ ")"
                                    H.span ! class_ "hs-conop" $ ":"
                                    H.span ! class_ "hs-keyword" $ "_"
                                    H.span ! class_ "hs-layout" $ ")"
                                    H.span ! class_ "hs-keyglyph" $ "="
                                    H.span ! class_ "hs-keyword" $ "if"
                                    H.span ! class_ "hs-varid" $ "isDigit"
                                    H.span ! class_ "hs-varid" $ "c"
                                    H.span ! class_ "hs-keyword" $ "then"
                                    H.span ! class_ "hs-conid" $ "Just"
                                    H.span ! class_ "hs-layout" $ "("
                                    H.span ! class_ "hs-varid" $ "ord"
                                    H.span ! class_ "hs-varid" $ "c"
                                    H.span ! class_ "hs-comment" $ "-"
                                    H.span ! class_ "hs-varid" $ "ord"
                                    H.span ! class_ "hs-chr" $ "'0'"
                                    H.span ! class_ "hs-layout" $ ")"
                                    H.span ! class_ "hs-keyword" $ "else"
                                    H.span ! class_ "hs-conid" $ "Nothing"
                                p "But you can just write:"
                                pre $ do
                                    H.span ! class_ "hs-definition" $ "main"
                                    H.span ! class_ "hs-keyglyph" $ "="
                                    H.span ! class_ "hs-keyword" $ "do"
                                    H.span ! class_ "hs-varid" $ "line"
                                    H.span ! class_ "hs-keyglyph" $ "<-"
                                    H.span ! class_ "hs-varid" $ "getLine"
                                    H.span ! class_ "hs-varid" $ "print"
                                    H.span ! class_ "hs-layout" $ "("
                                    H.span ! class_ "hs-varid" $ "parseDigit"
                                    H.span ! class_ "hs-varid" $ "line"
                                    H.span ! class_ "hs-layout" $ ")"
                                    H.span ! class_ "hs-keyword" $ "where"
                                    H.span ! class_ "hs-varid" $ "parseDigit"
                                    H.span ! class_ "hs-layout" $ "("
                                    H.span ! class_ "hs-varid" $ "c"
                                    H.span ! class_ "hs-conop" $ ":"
                                    H.span ! class_ "hs-keyword" $ "_"
                                    H.span ! class_ "hs-layout" $ ")"
                                    H.span ! class_ "hs-keyglyph" $ "="
                                    H.span ! class_ "hs-keyword" $ "if"
                                    H.span ! class_ "hs-varid" $ "isDigit"
                                    H.span ! class_ "hs-varid" $ "c"
                                    H.span ! class_ "hs-keyword" $ "then"
                                    H.span ! class_ "hs-conid" $ "Just"
                                    H.span ! class_ "hs-layout" $ "("
                                    H.span ! class_ "hs-varid" $ "ord"
                                    H.span ! class_ "hs-varid" $ "c"
                                    H.span ! class_ "hs-comment" $ "-"
                                    H.span ! class_ "hs-varid" $ "ord"
                                    H.span ! class_ "hs-chr" $ "'0'"
                                    H.span ! class_ "hs-layout" $ ")"
                                    H.span ! class_ "hs-keyword" $ "else"
                                    H.span ! class_ "hs-conid" $ "Nothing"
                                p "You can also use inference to avoid wasting time explaining what you want:"
                                pre $ do
                                    H.span ! class_ "hs-keyword" $ "do"
                                    H.span ! class_ "hs-varid" $ "ss"
                                    H.span ! class_ "hs-keyglyph" $ "<-"
                                    H.span ! class_ "hs-varid" $ "decode"
                                    H.span ! class_ "hs-str" $ "\"[\\\"Hello!\\\",\\\"World!\\\"]\""
                                    H.span ! class_ "hs-varid" $ "is"
                                    H.span ! class_ "hs-keyglyph" $ "<-"
                                    H.span ! class_ "hs-varid" $ "decode"
                                    H.span ! class_ "hs-str" $ "\"[1,2,3]\""
                                    H.span ! class_ "hs-varid" $ "return"
                                    H.span ! class_ "hs-layout" $ "("
                                    H.span ! class_ "hs-varid" $ "zipWith"
                                    H.span ! class_ "hs-layout" $ "("
                                    H.span ! class_ "hs-keyglyph" $ "\\"
                                    H.span ! class_ "hs-varid" $ "s"
                                    H.span ! class_ "hs-varid" $ "i"
                                    H.span ! class_ "hs-keyglyph" $ "->"
                                    H.span ! class_ "hs-varid" $ "s"
                                    H.span ! class_ "hs-varop" $ "++"
                                    H.span ! class_ "hs-str" $ "\" \""
                                    H.span ! class_ "hs-varop" $ "++"
                                    H.span ! class_ "hs-varid" $ "show"
                                    H.span ! class_ "hs-layout" $ "("
                                    H.span ! class_ "hs-varid" $ "i"
                                    H.span ! class_ "hs-varop" $ "+"
                                    H.span ! class_ "hs-num" $ "5"
                                    H.span ! class_ "hs-layout" $ ")"
                                    H.span ! class_ "hs-layout" $ ")"
                                    H.span ! class_ "hs-varid" $ "ss"
                                    H.span ! class_ "hs-varid" $ "is"
                                    H.span ! class_ "hs-layout" $ ")"
                                    H.span ! class_ "hs-keyglyph" $ "=>"
                                    H.span ! class_ "hs-conid" $ "Just"
                                    H.span ! class_ "hs-keyglyph" $ "["
                                    H.span ! class_ "hs-str" $ "\"Hello! 6\""
                                    H.span ! class_ "hs-layout" $ ","
                                    H.span ! class_ "hs-str" $ "\"World! 7\""
                                    H.span ! class_ "hs-keyglyph" $ "]"
                                p "Types give a parser specification for free, the following input is not accepted:"
                                pre $ do
                                    H.span ! class_ "hs-keyword" $ "do"
                                    H.span ! class_ "hs-varid" $ "ss"
                                    H.span ! class_ "hs-keyglyph" $ "<-"
                                    H.span ! class_ "hs-varid" $ "decode"
                                    H.span ! class_ "hs-str" $ "\"[1,2,3]\""
                                    H.span ! class_ "hs-varid" $ "is"
                                    H.span ! class_ "hs-keyglyph" $ "<-"
                                    H.span ! class_ "hs-varid" $ "decode"
                                    H.span ! class_ "hs-str" $ "\"[null,null,null]\""
                                    H.span ! class_ "hs-varid" $ "return"
                                    H.span ! class_ "hs-layout" $ "("
                                    H.span ! class_ "hs-varid" $ "zipWith"
                                    H.span ! class_ "hs-layout" $ "("
                                    H.span ! class_ "hs-keyglyph" $ "\\"
                                    H.span ! class_ "hs-varid" $ "s"
                                    H.span ! class_ "hs-varid" $ "i"
                                    H.span ! class_ "hs-keyglyph" $ "->"
                                    H.span ! class_ "hs-varid" $ "s"
                                    H.span ! class_ "hs-varop" $ "++"
                                    H.span ! class_ "hs-str" $ "\" \""
                                    H.span ! class_ "hs-varop" $ "++"
                                    H.span ! class_ "hs-varid" $ "show"
                                    H.span ! class_ "hs-layout" $ "("
                                    H.span ! class_ "hs-varid" $ "i"
                                    H.span ! class_ "hs-varop" $ "+"
                                    H.span ! class_ "hs-num" $ "5"
                                    H.span ! class_ "hs-layout" $ ")"
                                    H.span ! class_ "hs-layout" $ ")"
                                    H.span ! class_ "hs-varid" $ "ss"
                                    H.span ! class_ "hs-varid" $ "is"
                                    H.span ! class_ "hs-layout" $ ")"
                                    H.span ! class_ "hs-keyglyph" $ "=>"
                                    H.span ! class_ "hs-conid" $ "Nothing"
                        H.div ! class_ " span6 col-md-6" $ do
                            h3 "Concurrent"
                            p "Haskell lends itself well to concurrent programming due to its explicit handling of effects. Its flagship compiler, GHC, comes with a high-performance parallel garbage collector and light-weight concurrency library containing a number of useful concurrency primitives and abstractions."
                            p ! class_ "text-center" $ a ! dataAttribute "toggle" "collapse" ! href "#collapse-concurrent" ! class_ "btn btn-xs btn-primary" $ "Click to expand"
                            H.div ! A.id "collapse-concurrent" ! class_ "collapse" $ do
                                p "Easily launch threads and communicate with the standard library:"
                                pre $ do
                                    H.span ! class_ "hs-definition" $ "main"
                                    H.span ! class_ "hs-keyglyph" $ "="
                                    H.span ! class_ "hs-keyword" $ "do"
                                    H.span ! class_ "hs-varid" $ "done"
                                    H.span ! class_ "hs-keyglyph" $ "<-"
                                    H.span ! class_ "hs-varid" $ "newEmptyMVar"
                                    H.span ! class_ "hs-varid" $ "forkIO"
                                    H.span ! class_ "hs-layout" $ "("
                                    H.span ! class_ "hs-keyword" $ "do"
                                    H.span ! class_ "hs-varid" $ "putStrLn"
                                    H.span ! class_ "hs-str" $ "\"I'm one thread!\""
                                    H.span ! class_ "hs-varid" $ "putMVar"
                                    H.span ! class_ "hs-varid" $ "done"
                                    H.span ! class_ "hs-str" $ "\"Done!\""
                                    H.span ! class_ "hs-layout" $ ")"
                                    H.span ! class_ "hs-varid" $ "second"
                                    H.span ! class_ "hs-keyglyph" $ "<-"
                                    H.span ! class_ "hs-varid" $ "forkIO"
                                    H.span ! class_ "hs-layout" $ "("
                                    H.span ! class_ "hs-keyword" $ "do"
                                    H.span ! class_ "hs-varid" $ "threadDelay"
                                    H.span ! class_ "hs-num" $ "100000"
                                    H.span ! class_ "hs-varid" $ "putStrLn"
                                    H.span ! class_ "hs-str" $ "\"I'm another thread!\""
                                    H.span ! class_ "hs-layout" $ ")"
                                    H.span ! class_ "hs-varid" $ "killThread"
                                    H.span ! class_ "hs-varid" $ "second"
                                    H.span ! class_ "hs-varid" $ "msg"
                                    H.span ! class_ "hs-keyglyph" $ "<-"
                                    H.span ! class_ "hs-varid" $ "takeMVar"
                                    H.span ! class_ "hs-varid" $ "done"
                                    H.span ! class_ "hs-varid" $ "putStrLn"
                                    H.span ! class_ "hs-varid" $ "msg"
                                p "Use an asynchronous API for threads:"
                                pre $ do
                                    H.span ! class_ "hs-keyword" $ "do"
                                    H.span ! class_ "hs-varid" $ "a1"
                                    H.span ! class_ "hs-keyglyph" $ "<-"
                                    H.span ! class_ "hs-varid" $ "async"
                                    H.span ! class_ "hs-layout" $ "("
                                    H.span ! class_ "hs-varid" $ "getURL"
                                    H.span ! class_ "hs-varid" $ "url1"
                                    H.span ! class_ "hs-layout" $ ")"
                                    H.span ! class_ "hs-varid" $ "a2"
                                    H.span ! class_ "hs-keyglyph" $ "<-"
                                    H.span ! class_ "hs-varid" $ "async"
                                    H.span ! class_ "hs-layout" $ "("
                                    H.span ! class_ "hs-varid" $ "getURL"
                                    H.span ! class_ "hs-varid" $ "url2"
                                    H.span ! class_ "hs-layout" $ ")"
                                    H.span ! class_ "hs-varid" $ "page1"
                                    H.span ! class_ "hs-keyglyph" $ "<-"
                                    H.span ! class_ "hs-varid" $ "wait"
                                    H.span ! class_ "hs-varid" $ "a1"
                                    H.span ! class_ "hs-varid" $ "page2"
                                    H.span ! class_ "hs-keyglyph" $ "<-"
                                    H.span ! class_ "hs-varid" $ "wait"
                                    H.span ! class_ "hs-varid" $ "a2"
                                    H.span ! class_ "hs-varop" $ "..."
                                p "Atomic threading with software transactional memory:"
                                pre $ do
                                    H.span ! class_ "hs-definition" $ "transfer"
                                    H.span ! class_ "hs-keyglyph" $ "::"
                                    H.span ! class_ "hs-conid" $ "Account"
                                    H.span ! class_ "hs-keyglyph" $ "->"
                                    H.span ! class_ "hs-conid" $ "Account"
                                    H.span ! class_ "hs-keyglyph" $ "->"
                                    H.span ! class_ "hs-conid" $ "Int"
                                    H.span ! class_ "hs-keyglyph" $ "->"
                                    H.span ! class_ "hs-conid" $ "IO"
                                    H.span ! class_ "hs-conid" $ "()"
                                    H.span ! class_ "hs-definition" $ "transfer"
                                    H.span ! class_ "hs-varid" $ "from"
                                    H.span ! class_ "hs-varid" $ "to"
                                    H.span ! class_ "hs-varid" $ "amount"
                                    H.span ! class_ "hs-keyglyph" $ "="
                                    H.span ! class_ "hs-varid" $ "atomically"
                                    H.span ! class_ "hs-layout" $ "("
                                    H.span ! class_ "hs-keyword" $ "do"
                                    H.span ! class_ "hs-varid" $ "deposit"
                                    H.span ! class_ "hs-varid" $ "to"
                                    H.span ! class_ "hs-varid" $ "amount"
                                    H.span ! class_ "hs-varid" $ "withdraw"
                                    H.span ! class_ "hs-varid" $ "from"
                                    H.span ! class_ "hs-varid" $ "amount"
                                    H.span ! class_ "hs-layout" $ ")"
                                p "Atomic transactions must be repeatable, so arbitrary IO is disabled in the type system:"
                                H.div ! class_ "rejected-code" $ do
                                    H.span ! class_ "rejected-note" $ "Type error"
                                    pre $ do
                                        H.span ! class_ "hs-definition" $ "main"
                                        H.span ! class_ "hs-keyglyph" $ "="
                                        H.span ! class_ "hs-varid" $ "atomically"
                                        H.span ! class_ "hs-layout" $ "("
                                        H.span ! class_ "hs-varid" $ "putStrLn"
                                        H.span ! class_ "hs-str" $ "\"Hello!\""
                                        H.span ! class_ "hs-layout" $ ")"
                    H.div ! class_ " row " $ do
                        H.div ! class_ " span6 col-md-6" $ do
                            h3 "Lazy"
                            p "Functions don't evaluate their arguments. This means that programs can compose together very well, with the ability to write control constructs (such as if/else) just by writing normal functions. The purity of Haskell code makes it easy to fuse chains of functions together, allowing for performance benefits."
                            p ! class_ "text-center" $ a ! dataAttribute "toggle" "collapse" ! href "#collapse-lazy" ! class_ "btn btn-xs btn-primary" $ "Click to expand"
                            H.div ! A.id "collapse-lazy" ! class_ "collapse" $ do
                                p "Define control structures easily:"
                                pre $ do
                                    H.span ! class_ "hs-definition" $ "when"
                                    H.span ! class_ "hs-varid" $ "p"
                                    H.span ! class_ "hs-varid" $ "m"
                                    H.span ! class_ "hs-keyglyph" $ "="
                                    H.span ! class_ "hs-keyword" $ "if"
                                    H.span ! class_ "hs-varid" $ "p"
                                    H.span ! class_ "hs-keyword" $ "then"
                                    H.span ! class_ "hs-varid" $ "m"
                                    H.span ! class_ "hs-keyword" $ "else"
                                    H.span ! class_ "hs-varid" $ "return"
                                    H.span ! class_ "hs-conid" $ "()"
                                    H.span ! class_ "hs-definition" $ "main"
                                    H.span ! class_ "hs-keyglyph" $ "="
                                    H.span ! class_ "hs-keyword" $ "do"
                                    H.span ! class_ "hs-varid" $ "args"
                                    H.span ! class_ "hs-keyglyph" $ "<-"
                                    H.span ! class_ "hs-varid" $ "getArgs"
                                    H.span ! class_ "hs-varid" $ "when"
                                    H.span ! class_ "hs-layout" $ "("
                                    H.span ! class_ "hs-varid" $ "null"
                                    H.span ! class_ "hs-varid" $ "args"
                                    H.span ! class_ "hs-layout" $ ")"
                                    H.span ! class_ "hs-layout" $ "("
                                    H.span ! class_ "hs-varid" $ "putStrLn"
                                    H.span ! class_ "hs-str" $ "\"No args specified!\""
                                    H.span ! class_ "hs-layout" $ ")"
                                p "If you notice a repeated expression pattern, like"
                                pre $ do
                                    H.span ! class_ "hs-keyword" $ "if"
                                    H.span ! class_ "hs-varid" $ "c"
                                    H.span ! class_ "hs-keyword" $ "then"
                                    H.span ! class_ "hs-varid" $ "t"
                                    H.span ! class_ "hs-keyword" $ "else"
                                    H.span ! class_ "hs-conid" $ "False"
                                p "you can give this a name, like"
                                pre $ do
                                    H.span ! class_ "hs-definition" $ "and"
                                    H.span ! class_ "hs-varid" $ "c"
                                    H.span ! class_ "hs-varid" $ "t"
                                    H.span ! class_ "hs-keyglyph" $ "="
                                    H.span ! class_ "hs-keyword" $ "if"
                                    H.span ! class_ "hs-varid" $ "c"
                                    H.span ! class_ "hs-keyword" $ "then"
                                    H.span ! class_ "hs-varid" $ "t"
                                    H.span ! class_ "hs-keyword" $ "else"
                                    H.span ! class_ "hs-conid" $ "False"
                                p "and then use it with the same effect as the orginal expression."
                                p $ do
                                    "Get code re-use by composing lazy functions. It's quite natural to express the"
                                    code "any"
                                    "function by reusing the"
                                    code "map"
                                    "and"
                                    code "or"
                                    "functions:"
                                pre $ do
                                    H.span ! class_ "hs-definition" $ "any"
                                    H.span ! class_ "hs-keyglyph" $ "::"
                                    H.span ! class_ "hs-layout" $ "("
                                    H.span ! class_ "hs-varid" $ "a"
                                    H.span ! class_ "hs-keyglyph" $ "->"
                                    H.span ! class_ "hs-conid" $ "Bool"
                                    H.span ! class_ "hs-layout" $ ")"
                                    H.span ! class_ "hs-keyglyph" $ "->"
                                    H.span ! class_ "hs-keyglyph" $ "["
                                    H.span ! class_ "hs-varid" $ "a"
                                    H.span ! class_ "hs-keyglyph" $ "]"
                                    H.span ! class_ "hs-keyglyph" $ "->"
                                    H.span ! class_ "hs-conid" $ "Bool"
                                    H.span ! class_ "hs-definition" $ "any"
                                    H.span ! class_ "hs-varid" $ "p"
                                    H.span ! class_ "hs-keyglyph" $ "="
                                    H.span ! class_ "hs-varid" $ "or"
                                    H.span ! class_ "hs-varop" $ "."
                                    H.span ! class_ "hs-varid" $ "map"
                                    H.span ! class_ "hs-varid" $ "p"
                                p $ do
                                    "Reuse the recursion patterns in"
                                    code "map"
                                    ","
                                    code "filter"
                                    ","
                                    code "foldr"
                                    ", etc."
                        H.div ! class_ " span6 col-md-6" $ do
                            h3 "Packages"
                            p "Open source contribution to Haskell is very active with a wide range of packages available on the public package servers."
                            p ! class_ "text-center" $ a ! dataAttribute "toggle" "collapse" ! href "#collapse-packages" ! class_ "btn btn-xs btn-primary" $ "Click to expand"
                            H.div ! A.id "collapse-packages" ! class_ "collapse" $ do
                                p "There are 6,954 packages freely available. Here is a sample of the most common ones:"
                                table ! class_ "packages" $ do
                                    tr $ do
                                        td $ a ! href "https://hackage.haskell.org/package/bytestring" $ "bytestring"
                                        td "Binary data"
                                        td ! class_ "rhs" $ a ! href "https://hackage.haskell.org/package/base" $ "base"
                                        td ! class_ "rhs" $ "Prelude, IO, threads"
                                    tr $ do
                                        td $ a ! href "https://hackage.haskell.org/package/network" $ "network"
                                        td "Networking"
                                        td ! class_ "rhs" $ a ! href "https://hackage.haskell.org/package/text" $ "text"
                                        td ! class_ "rhs" $ "Unicode text"
                                    tr $ do
                                        td $ a ! href "https://hackage.haskell.org/package/parsec" $ "parsec"
                                        td "Parser library"
                                        td ! class_ "rhs" $ a ! href "https://hackage.haskell.org/package/directory" $ "directory"
                                        td ! class_ "rhs" $ "File/directory"
                                    tr $ do
                                        td $ a ! href "https://hackage.haskell.org/package/hspec" $ "hspec"
                                        td "RSpec-like tests"
                                        td ! class_ "rhs" $ a ! href "https://hackage.haskell.org/package/attoparsec" $ "attoparsec"
                                        td ! class_ "rhs" $ "Fast parser"
                                    tr $ do
                                        td $ a ! href "https://hackage.haskell.org/package/monad-logger" $ "monad-logger"
                                        td "Logging"
                                        td ! class_ "rhs" $ a ! href "https://hackage.haskell.org/package/persistent" $ "persistent"
                                        td ! class_ "rhs" $ "Database ORM"
                                    tr $ do
                                        td $ a ! href "https://hackage.haskell.org/package/template-haskell" $ "template-haskell"
                                        td "Meta-programming"
                                        td ! class_ "rhs" $ a ! href "https://hackage.haskell.org/package/tar" $ "tar"
                                        td ! class_ "rhs" $ "Tar archives"
                                    tr $ do
                                        td $ a ! href "https://hackage.haskell.org/package/snap" $ "snap"
                                        td "Web framework"
                                        td ! class_ "rhs" $ a ! href "https://hackage.haskell.org/package/time" $ "time"
                                        td ! class_ "rhs" $ "Date, time, etc."
                                    tr $ do
                                        td $ a ! href "https://hackage.haskell.org/package/happstack" $ "happstack"
                                        td "Web framework"
                                        td ! class_ "rhs" $ a ! href "https://hackage.haskell.org/package/yesod" $ "yesod"
                                        td ! class_ "rhs" $ "Web framework"
                                    tr $ do
                                        td $ a ! href "https://hackage.haskell.org/package/containers" $ "containers"
                                        td "Maps, graphs, sets"
                                        td ! class_ "rhs" $ a ! href "https://hackage.haskell.org/package/fsnotify" $ "fsnotify"
                                        td ! class_ "rhs" $ "Watch filesystem"
                                    tr $ do
                                        td $ a ! href "https://hackage.haskell.org/package/hint" $ "hint"
                                        td "Interpret Haskell"
                                        td ! class_ "rhs" $ a ! href "https://hackage.haskell.org/package/unix" $ "unix"
                                        td ! class_ "rhs" $ "UNIX bindings"
                                    tr $ do
                                        td $ a ! href "https://hackage.haskell.org/package/SDL" $ "SDL"
                                        td "SDL binding"
                                        td ! class_ "rhs" $ a ! href "https://hackage.haskell.org/package/OpenGL" $ "OpenGL"
                                        td ! class_ "rhs" $ "OpenGL graphics system"
                                    tr $ do
                                        td $ a ! href "https://hackage.haskell.org/package/criterion" $ "criterion"
                                        td "Benchmarking"
                                        td ! class_ "rhs" $ a ! href "https://hackage.haskell.org/package/pango" $ "pango"
                                        td ! class_ "rhs" $ "Text rendering"
                                    tr $ do
                                        td $ a ! href "https://hackage.haskell.org/package/cairo" $ "cairo"
                                        td "Cairo graphics"
                                        td ! class_ "rhs" $ a ! href "https://hackage.haskell.org/package/statistics" $ "statistics"
                                        td ! class_ "rhs" $ "Statistical analysis"
                                    tr $ do
                                        td $ a ! href "https://hackage.haskell.org/package/gtk" $ "gtk"
                                        td "Gtk+ library"
                                        td ! class_ "rhs" $ a ! href "https://hackage.haskell.org/package/glib" $ "glib"
                                        td ! class_ "rhs" $ "GLib library"
                                    tr $ do
                                        td $ a ! href "https://hackage.haskell.org/package/test-framework" $ "test-framework"
                                        td "Testing framework"
                                        td ! class_ "rhs" $ a ! href "https://hackage.haskell.org/package/resource-pool" $ "resource-pool"
                                        td ! class_ "rhs" $ "Resource pooling"
                                    tr $ do
                                        td $ a ! href "https://hackage.haskell.org/package/conduit" $ "conduit"
                                        td "Streaming I/O"
                                        td ! class_ "rhs" $ a ! href "https://hackage.haskell.org/package/mwc-random" $ "mwc-random"
                                        td ! class_ "rhs" $ "High-quality randoms"
                                    tr $ do
                                        td $ a ! href "https://hackage.haskell.org/package/QuickCheck" $ "QuickCheck"
                                        td "Property testing"
                                        td ! class_ "rhs" $ a ! href "https://hackage.haskell.org/package/stm" $ "stm"
                                        td ! class_ "rhs" $ "Atomic threading"
                                    tr $ do
                                        td $ a ! href "https://hackage.haskell.org/package/blaze-html" $ "blaze-html"
                                        td "Markup generation"
                                        td ! class_ "rhs" $ a ! href "https://hackage.haskell.org/package/cereal" $ "cereal"
                                        td ! class_ "rhs" $ "Binary parsing/printing"
                                    tr $ do
                                        td $ a ! href "https://hackage.haskell.org/package/xml" $ "xml"
                                        td "XML parser/printer"
                                        td ! class_ "rhs" $ a ! href "https://hackage.haskell.org/package/http-client" $ "http-client"
                                        td ! class_ "rhs" $ "HTTP client engine"
                                    tr $ do
                                        td $ a ! href "https://hackage.haskell.org/package/zlib" $ "zlib"
                                        td "zlib/gzip/raw"
                                        td ! class_ "rhs" $ a ! href "https://hackage.haskell.org/package/yaml" $ "yaml"
                                        td ! class_ "rhs" $ "YAML parser/printer"
                                    tr $ do
                                        td $ a ! href "https://hackage.haskell.org/package/pandoc" $ "pandoc"
                                        td "Markup conversion"
                                        td ! class_ "rhs" $ a ! href "https://hackage.haskell.org/package/binary" $ "binary"
                                        td ! class_ "rhs" $ "Serialization"
                                    tr $ do
                                        td $ a ! href "https://hackage.haskell.org/package/tls" $ "tls"
                                        td "TLS/SSL"
                                        td ! class_ "rhs" $ a ! href "https://hackage.haskell.org/package/zip-archive" $ "zip-archive"
                                        td ! class_ "rhs" $ "Zip compression"
                                    tr $ do
                                        td $ a ! href "https://hackage.haskell.org/package/warp" $ "warp"
                                        td "Web server"
                                        td ! class_ "rhs" $ a ! href "https://hackage.haskell.org/package/text-icu" $ "text-icu"
                                        td ! class_ "rhs" $ "Text encodings"
                                    tr $ do
                                        td $ a ! href "https://hackage.haskell.org/package/vector" $ "vector"
                                        td "Vectors"
                                        td ! class_ "rhs" $ a ! href "https://hackage.haskell.org/package/async" $ "async"
                                        td ! class_ "rhs" $ "Asyn concurrency"
                                    tr $ do
                                        td $ a ! href "https://hackage.haskell.org/package/pipes" $ "pipes"
                                        td "Streaming IO"
                                        td ! class_ "rhs" $ a ! href "https://hackage.haskell.org/package/scientific" $ "scientific"
                                        td ! class_ "rhs" $ "Arbitrary-prec. nums"
                                    tr $ do
                                        td $ a ! href "https://hackage.haskell.org/package/process" $ "process"
                                        td "Launch processes"
                                        td ! class_ "rhs" $ a ! href "https://hackage.haskell.org/package/aeson" $ "aeson"
                                        td ! class_ "rhs" $ "JSON parser/printer"
                                    tr $ do
                                        td $ a ! href "https://hackage.haskell.org/package/dlist" $ "dlist"
                                        td "Difflists"
                                        td ! class_ "rhs" $ a ! href "https://hackage.haskell.org/package/syb" $ "syb"
                                        td ! class_ "rhs" $ "Generic prog."
                br
                H.div ! class_ "sponsors pattern-bg" $ H.div ! class_ " container " $ do
                    H.div ! class_ " row " $ H.div ! class_ " span6 col-sm-6" $ h2 "Sponsors"
                    H.div ! class_ " row " $ do
                        H.div ! class_ " span6 col-sm-6" $ p $ do
                            strong $ a ! href "https://www.datadoghq.com" $ "DataDog"
                            "provides powerful, customizable 24/7 metrics and monitoring integration for all of Haskell.org, and complains loudly for us when things go wrong."
                        H.div ! class_ " span6 col-sm-6" $ p $ do
                            strong $ a ! href "https://www.fastly.com" $ "Fastly"
                            "'s Next Generation CDN provides low latency access for all of Haskell.org's downloads and highest traffic services, including the primary Hackage server, Haskell Platform downloads, and more."
                    H.div ! class_ " row " $ do
                        H.div ! class_ " span6 col-sm-6" $ p $ do
                            strong $ a ! href "https://www.rackspace.com" $ "Rackspace"
                            "provides compute, storage, and networking resources, powering almost all of Haskell.org in several regions around the world."
                        H.div ! class_ " span6 col-sm-6" $ p $ do
                            strong $ a ! href "https://www.status.io" $ "Status.io"
                            "powers"
                            a ! href "https://status.haskell.org" $ "https://status.haskell.org"
                            ", and lets us easily tell you when we broke something."
                    H.div ! class_ " row " $ do
                        H.div ! class_ " span6 col-sm-6" $ p $ do
                            strong $ a ! href "http://www.galois.com" $ "Galois"
                            "provides infrastructure, funds, administrative resources and has historically hosted critical Haskell.org infrastructure, as well as helping the Haskell community at large with their work."
                        H.div ! class_ " span6 col-sm-6" $ p $ do
                            strong $ a ! href "https://www.dreamhost.com" $ "DreamHost"
                            "has teamed up to provide Haskell.org with redundant, scalable object-storage through their Dream Objects service."
                    H.div ! class_ " row " $ do
                        H.div ! class_ " span6 col-sm-6" $ p $ do
                            strong $ a ! href "http://awakenetworks.com/" $ "Awake Networks"
                            "is building a next generation network security and analytics platform. They are a proud sponsor of the"
                            a ! href "https://summer.haskell.org/" $ "Summer of Haskell"
                            "and contribute broadly to the Haskell community."
                        H.div ! class_ " span6 col-sm-6" $ p $ do
                            strong $ a ! href "http://digitalasset.com/" $ "Digital Asset"
                            "provides Distributed Ledger solutions for financial institutions globally. They have developed a pure, typed, functional, domain specific language for writing contracts, called DAML.  They are a proud sponsor of the"
                            a ! href "https://summer.haskell.org/" $ "Summer of Haskell"
                            "and contribute broadly to the Haskell community."
                    H.div ! class_ " row " $ do
                        H.div ! class_ " span6 col-sm-6" $ p $ do
                            strong $ a ! href "https://asahi-net.jp/en/" $ "Asahi Net"
                            "is a Japanese Internet service provider that has been running stable systems for over 25 years.  They are a proud sponsor of the Summer of Haskell, and contribute to the Japanese Haskell community."
                        H.div ! class_ " span6 col-sm-6" $ p $ do
                            strong $ a ! href "http://fugue.co/" $ "Fugue Inc."
                            "radically simplifies cloud operations with its software-defined system for dynamically orchestrating and enforcing cloud infrastructure at scale.  Fugue uses Haskell in its product and is proud to sponsor Summer of Haskell."
                    H.div ! class_ " row " $ do
                        H.div ! class_ " span6 col-sm-6" $ p $ do
                            strong $ a ! href "https://iohk.io/" $ "IOHK"
                            "is a technology company committed to using peer-to-peer technologies to provide financial services to the three billion people who don't have them.  They implement our first-principles cryptographic research in Haskell and are committed to the development of the Haskell ecosystem. IOHK is a sponsor of the Summer of Haskell."
                        H.div ! class_ " span6 col-sm-6" $ p $ do
                            strong $ a ! href "https://www.tweag.io" $ "Tweag I/O"
                            "is a network of software innovation labs across Europe. They have shipped Haskell in anything from tiny web services to large high-performance compute clusters with custom hardware. Tweag is a sponsor of Summer of Haskell."
                    H.div ! class_ " row " $ H.div ! class_ " span6 col-sm-6" $ p $ do
                        strong $ a ! href "https://webmon.com" $ "Webmon"
                        "provides monitoring and escalation for core haskell.org infrastructure."
                H.div ! class_ "transition" $ H.div ! class_ " container " $ H.div ! class_ " row " $ H.div ! class_ " span6 col-sm-6" $ do
                    br
                    h2 "Psst! Looking for the wiki?"
                    p $ do
                        "This is the new Haskell home page! The wiki has moved to"
                        a ! href "https://wiki.haskell.org" $ "wiki.haskell.org."
                    br
            H.div ! class_ "footer" $ H.div ! class_ "container" $ p $ H.div ! class_ " container " $ H.div ! class_ " row " $ do
                H.div ! class_ " span3 col-sm-4 col-md-3" $ H.span ! class_ "item" $ "2014-2017 haskell.org"
                H.div ! class_ " span12 col-xs-12 visible-xs" $ br
                H.div ! class_ " span8 col-sm-4 col-md-6 text-center" $ do
                    br ! class_ "visible-xs"
                    H.span ! class_ "item" $ "Got changes to contribute to the site?"
                    br ! class_ "visible-xs"
                    a ! href "https://github.com/haskell-infra/hl" $ "Fork or comment on Github"
                    br ! class_ "visible-xs"
                H.div ! class_ " span12 col-xs-12 visible-xs" $ br
                H.div ! class_ " span3 col-sm-4 col-md-3 text-right" $ do
                    H.span "Proudly hosted by"
                    a ! href "https://www.rackspace.com/" $ img ! height "20" ! width "20" ! src "http://www.haskell.org/static/img/rackspace.svg?etag=J84VdDuP" ! alt "rackspace"
                H.div ! class_ " span12 col-sm-12" $ br
            script ! src "http://www.haskell.org/static/js/jquery.js?etag=j8JeJ9Qn" $ mempty
            script ! src "http://www.haskell.org/static/js/bootstrap.min.js?etag=SxgsLh7a" $ mempty
            script ! src "http://www.haskell.org/static/js/home.js?etag=w6pzbsRe" $ mempty
            script ! src "http://www.haskell.org/static/js/jquery.console.js?etag=uAlUuN_m" $ mempty
            script ! src "http://www.haskell.org/static/js/tryhaskell.js?etag=S8s8CEmL" $ mempty
            script ! src "http://www.haskell.org/static/js/tryhaskell.pages.js?etag=EMKsJm3I" $ mempty
            script "var _gaq = _gaq || [];\n_gaq.push(['_setAccount', 'UA-83290513-1']);\n_gaq.push(['_trackPageview']);\n(function() {\n var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n})();"


main :: IO ()
main = do
	putStr $ renderHtml index
